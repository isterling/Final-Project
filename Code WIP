#include <SPI.h> //Needed for SPI 

#include <Wire.h>

#include <avr/pgmspace.h> //Store data in flash (program) memory instead of SRAM

#include <Adafruit_BNO055.h> //Sensor Library

#include <Adafruit_Sensor.h> //Unified sensor library

#include <U8glib.h> //OLED display library

#include <utility/imumaths.h>

//A port of my original JustBasic Cube_3D demo to the Arduino Uno using U8G library.

#include "U8glib.h"


////////////////////////////////
///////////CUBE CODE////////////
////////////////////////////////


/* BNO055 Board layout:
       +----------+
       |         *| RST   PITCH  ROLL  HEADING
   ADR |*        *| SCL
   INT |*        *| SDA     ^            /->
   PS1 |*        *| GND     |            |
   PS0 |*        *| 3VO     Y    Z-->    \-X
       |         *| VIN
       +----------+

  VIN = 3v3, GND = GND, SCL = A5, SDA = A4
*/

#define BNO055_SAMPLERATE_DELAY_MS (100)
Adafruit_BNO055 bno = Adafruit_BNO055(55);

//The following line will need changing depending on your board type!
U8GLIB_LD7032_60x32 u8g(13, 11, 10, 9, 8);  // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9, RST = 8

float tx, nx, p;
float ty, ny, py;
float rot, rotx, roty, rotz, rotxx, rotyy, rotzz, rotxxx, rotyyy, rotzzz;
int i; //0 to 360
int fl, scale; //focal length
int wireframe[12][2];

int originx = 32;
int originy = 15; //32

int front_depth = 5;
int back_depth = -5;

//Store cube vertices
int cube_vertex[8][3] = {
  { -5, -5, front_depth},
  {5, -5, front_depth},
  {5, 5, front_depth},
  { -5, 5, front_depth},
  { -5, -5, back_depth},
  {5, -5, back_depth},
  {5, 5, back_depth},
  { -5, 5, back_depth}
};

int fd = 0; //0=orthographic

void setup(void)
{

  u8g.begin();

  //loop picture
  u8g.firstPage();
  do {
    // empty screen
  } while ( u8g.nextPage() );

  bno.begin();
}

void draw_vertices(void)
{
  u8g.drawPixel (rotxxx, rotyyy);
}

void draw_wireframe(void) {

  for (int i = 0; i < 3; i++) {
    u8g.drawLine(wireframe[0][0], wireframe[0][1], wireframe[1][0], wireframe[1][1]);
    u8g.drawLine(wireframe[1][0], wireframe[1][1], wireframe[2][0], wireframe[2][1]);
    u8g.drawLine(wireframe[2][0], wireframe[2][1], wireframe[3][0], wireframe[3][1]);
    u8g.drawLine(wireframe[3][0], wireframe[3][1], wireframe[0][0], wireframe[0][1]);

    //cross face above
    u8g.drawLine(wireframe[1][0], wireframe[1][1], wireframe[3][0], wireframe[3][1]);
    u8g.drawLine(wireframe[0][0], wireframe[0][1], wireframe[2][0], wireframe[2][1]);

    u8g.drawLine(wireframe[4][0], wireframe[4][1], wireframe[5][0], wireframe[5][1]);
    u8g.drawLine(wireframe[5][0], wireframe[5][1], wireframe[6][0], wireframe[6][1]);
    u8g.drawLine(wireframe[6][0], wireframe[6][1], wireframe[7][0], wireframe[7][1]);
    u8g.drawLine(wireframe[7][0], wireframe[7][1], wireframe[4][0], wireframe[4][1]);

    u8g.drawLine(wireframe[0][0], wireframe[0][1], wireframe[4][0], wireframe[4][1]);
    u8g.drawLine(wireframe[1][0], wireframe[1][1], wireframe[5][0], wireframe[5][1]);
    u8g.drawLine(wireframe[2][0], wireframe[2][1], wireframe[6][0], wireframe[6][1]);
    u8g.drawLine(wireframe[3][0], wireframe[3][1], wireframe[7][0], wireframe[7][1]);
  }

}

void loop(void)
{
  //Read BNO055 sensor
  /* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);

  float rot[] = {(event.orientation.y / 15.0 * -1), event.orientation.x / 15.0, event.orientation.z / 15.0 + 100};
  if (rot[0] >= 360.0) rot[0] = 0;
  if (rot[1] >= 360.0) rot[1] = 0;
  if (rot[2] >= 360.0) rot[2] = 0;

  u8g.firstPage();

  //picture loop
  for (int i = 0; i < 8; i++) {
    //rotateY
    rotx = cos(rot[0]) * cube_vertex[i][2] + sin(rot[0]) * cube_vertex[i][0];
    roty = cube_vertex[i][1];
    rotz = -sin(rot[0]) * cube_vertex[i][2] + cos(rot[0]) * cube_vertex[i][0];
    //rotateX
    rotxx = rotx;
    rotyy = cos(rot[1]) * roty - sin(rot[1]) * rotz;
    rotzz = sin(rot[1]) * roty + cos(rot[1]) * rotz;
    //rotateZ
    rotxxx = cos(rot[2]) * rotxx - sin(rot[2]) * rotyy;
    rotyyy = sin(rot[2]) * rotxx + cos(rot[2]) * rotyy;
    rotzzz = rotzz;
  }

    //orthographic projection
    rotxxx = rotxxx + originx;
    rotyyy = rotyyy + originy;

    //store new vertices values for wireframe drawing
    wireframe[i][0] = rotxxx;
    wireframe[i][1] = rotyyy;
    wireframe[i][2] = rotzzz;

    draw_vertices();
  }

  draw_wireframe();

  while (u8g.nextPage());
}
