#include <SPI.h> //Needed for SPI 

#include <Wire.h>

#include <avr/pgmspace.h> //Store data in flash (program) memory instead of SRAM

#include <Adafruit_BNO055.h> //Sensor Library

#include <Adafruit_Sensor.h> //Unified sensor library

#include <U8glib.h> //OLED display library

#include <utility/imumaths.h>

//A port of my original JustBasic Cube_3D demo to the Arduino Uno using U8G library.

#include "U8glib.h"


////////////////////////////////
////////GLOBAL VARIABLES////////
////////////////////////////////


/* BNO055 Board layout:
       +----------+
       |         *| RST   PITCH  ROLL  HEADING
   ADR |*        *| SCL`
   INT |*        *| SDA     ^            /->
   PS1 |*        *| GND     |            |
   PS0 |*        *| 3VO     Y    Z-->    \-X
       |         *| VIN
       +----------+

  VIN = 3v3, GND = GND, SCL = A5, SDA = A4
*/

#define BNO055_SAMPLERATE_DELAY_MS (100)
Adafruit_BNO055 bno = Adafruit_BNO055(55);

//The following line will need changing depending on your board type!
U8GLIB_LD7032_60x32 u8g(13, 11, 10, 9, 8);  // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9, RST = 8
uint8_t draw_state = 0;
float tx, nx, p;
float ty, ny, py;
float rot, rotx, roty, rotz, rotxx, rotyy, rotzz, rotxxx, rotyyy, rotzzz;
int i; //0 to 360
int fl, scale; //focal length
int wireframe[12][2];

int originx = 32;
int originy = 15; //32

int front_depth = 9;
int back_depth = -9;

boolean splashOver = false;

//Store cube vertices
int cube_vertex[8][3] = {
  { -9, -9, front_depth},
  {9, -9, front_depth},
  {9, 9, front_depth},
  { -9, 9, front_depth},
  { -9, -9, back_depth},
  {9, -9, back_depth},
  {9, 9, back_depth},
  { -9, 9, back_depth}
};

int fd = 0; //0=orthographic


////////////////////////////////
//////////SPLASH SCREEN/////////
////////////////////////////////

#define u8g_logo_width 60/8
#define u8g_logo_height 32

const unsigned char PROGMEM CCA_logo [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x07, 0xC0, 0x3F, 0xF8, 0x00,
  0x0F, 0xF8, 0x1F, 0xF0, 0x3F, 0xF8, 0x00, 0x1E, 0x38, 0x3C, 0x70, 0x00, 0x18, 0x00, 0x18, 0x08,
  0x30, 0x10, 0x00, 0x18, 0x00, 0x30, 0x00, 0x60, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x60, 0x00,
  0x3E, 0x18, 0x00, 0x60, 0x00, 0xC0, 0x00, 0x7F, 0x18, 0x00, 0x60, 0x00, 0xC0, 0x00, 0xE3, 0x98,
  0x00, 0x60, 0x00, 0xC0, 0x01, 0xC1, 0xC8, 0x00, 0x60, 0x00, 0xC0, 0x01, 0x80, 0xC8, 0x00, 0x70,
  0x00, 0xE0, 0x01, 0x80, 0xC8, 0x00, 0x30, 0x00, 0x60, 0x01, 0x80, 0xC8, 0x00, 0x18, 0x08, 0x30,
  0x11, 0xC1, 0xD8, 0x00, 0x1E, 0x38, 0x3C, 0x70, 0xE3, 0x98, 0x00, 0x0F, 0xF8, 0x1F, 0xF0, 0x7F,
  0x18, 0x00, 0x03, 0xF0, 0x07, 0xE0, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0D, 0x27, 0x04, 0x72, 0xF3, 0x4F, 0x3D, 0x96, 0x76, 0x59, 0x77, 0xED, 0x1A, 0x4A, 0x9B, 0x94
};




void setup(void)
{
  Serial.begin(9600);
  u8g.begin();

  //loop picture
  u8g.firstPage();
  do {
    // empty screen
  } while ( u8g.nextPage() );

  bno.begin();
}


////////////////////////////////
///////////CUBE CODE////////////
////////////////////////////////


void draw_vertices(void)
{
  u8g.drawPixel (rotxxx, rotyyy);
}



void draw_wireframe(void) {

  for (int i = 0; i < 3; i++) {
    u8g.drawLine(wireframe[0][0], wireframe[0][1], wireframe[1][0], wireframe[1][1]);
    u8g.drawLine(wireframe[1][0], wireframe[1][1], wireframe[2][0], wireframe[2][1]);
    u8g.drawLine(wireframe[2][0], wireframe[2][1], wireframe[3][0], wireframe[3][1]);
    u8g.drawLine(wireframe[3][0], wireframe[3][1], wireframe[0][0], wireframe[0][1]);

    //cross face above
    u8g.drawLine(wireframe[1][0], wireframe[1][1], wireframe[3][0], wireframe[3][1]);
    u8g.drawLine(wireframe[0][0], wireframe[0][1], wireframe[2][0], wireframe[2][1]);

    u8g.drawLine(wireframe[4][0], wireframe[4][1], wireframe[5][0], wireframe[5][1]);
    u8g.drawLine(wireframe[5][0], wireframe[5][1], wireframe[6][0], wireframe[6][1]);
    u8g.drawLine(wireframe[6][0], wireframe[6][1], wireframe[7][0], wireframe[7][1]);
    u8g.drawLine(wireframe[7][0], wireframe[7][1], wireframe[4][0], wireframe[4][1]);

    u8g.drawLine(wireframe[0][0], wireframe[0][1], wireframe[4][0], wireframe[4][1]);
    u8g.drawLine(wireframe[1][0], wireframe[1][1], wireframe[5][0], wireframe[5][1]);
    u8g.drawLine(wireframe[2][0], wireframe[2][1], wireframe[6][0], wireframe[6][1]);
    u8g.drawLine(wireframe[3][0], wireframe[3][1], wireframe[7][0], wireframe[7][1]);
  }

}

void loop(void) {

  if (splashOver == false) {
    Serial.print("draw_state: ");
    Serial.println(draw_state);
    u8g.firstPage();
    do {
      draw();
    }
    while ( u8g.nextPage() );
    draw_state++;

    if ( draw_state >= 0) {
      splashOver = true;
    }
    delay(8000);

  } else {
    //Read BNO055 sensor
    /* Get a new sensor event */
    sensors_event_t event;


    bno.getEvent(&event);

    float rot[] = {(event.orientation.y / 50.0)*-1, event.orientation.x / 50.0 , event.orientation.z / 50.0};

    u8g.firstPage();
    do {
      //picture loop
      for (int i = 0; i < 8; i++) {
        //rotateY
        rotx = cos(rot[0]) * cube_vertex[i][2] + sin(rot[0]) * cube_vertex[i][0];
        roty = cube_vertex[i][1];
        rotz = -sin(rot[0]) * cube_vertex[i][2] + cos(rot[0]) * cube_vertex[i][0];
        //rotateX
        rotxx = rotx;
        rotyy = cos(rot[1]) * roty - sin(rot[1]) * rotz;
        rotzz = sin(rot[1]) * roty + cos(rot[1]) * rotz;
        //rotateZ
        rotxxx = cos(rot[2]) * rotxx - sin(rot[2]) * rotyy;
        rotyyy = sin(rot[2]) * rotxx + cos(rot[2]) * rotyy;
        rotzzz = rotzz;

        //orthographic projection
        rotxxx = rotxxx + originx;
        rotyyy = rotyyy + originy;

        //store new vertices values for wireframe drawing
        wireframe[i][0] = rotxxx;
        wireframe[i][1] = rotyyy;
        wireframe[i][2] = rotzzz;

        draw_vertices();
      }
      draw_wireframe();
    } while (u8g.nextPage());

  }
}

void draw(void) {
  switch (draw_state >> 0) {
    case 0: u8g.drawBitmapP( 0, 0, u8g_logo_width , u8g_logo_height, CCA_logo); break;
  }
}
